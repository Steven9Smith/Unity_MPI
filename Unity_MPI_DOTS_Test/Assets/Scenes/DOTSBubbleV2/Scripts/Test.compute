// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ExecuteRungeKutta
#pragma kernel PostProcessing
#pragma kernel InitializeBubbleData
#pragma enable_d3d11_debug_symbols

#define INVALID_TYPE 0
#define INTERFACE_TYPE_FLUID 1
#define INTERFACE_TYPE_RIGID 2
#define MOVING_TYPE_STATIC 1
#define MOVING_TYPE_RISING 2
#define PI 3.1415926535
#define CF 1497
#define MU 0.00089f
#define RHO_WATER 998
#define GTH 1600000
#define GAMMA 1.4f
#define G 9.8f
#define SIGMA 0.072f
#define ETA 0.84f
#define PATM 101325
#define del_rho 997 // Density difference between the phases

struct DOTSBubbleData {
	int m_movingtype;
	int m_interfacetype;
	float radius;
	float depth;
	float startTime, endTime;
	int steps;
	float timeLeft;
	int index;
};



struct DOTS_Step_Calculations
{
	int m_interfaceType;
	int m_movingType;

	float radius, depth;
	float p0, v0, k;
	// For Jet Forcing
	float cutoff, mrp, jval_initial;
	// Bubble Terminal Velocity
	 float vt;
	// rising bubble
	 float rising_d_m1;
	// Actual Freq
	 float AF_v0, AF_omega_a, AF_b;
	// Calculate Beta
	float B_dr_a, B_dvis_a, B_dvis_b, B_phi_a, B_phi_B, B_dth_a;


	static float JetForcing(float t,float cutoff,float jval_initial){
		if (t < 0 || t > cutoff)
			return 0;
		return jval_initial * pow(t, 2);
	}
	static float BubbleTerminalVelocity(float r){

		float d = 2 * r;

		// eq 2
		float vtpot = 1 / 36 * del_rho * G * pow(d, 2) / MU;

		// eq 6
		float vt1 = vtpot * sqrt(1 + 0.73667f * sqrt(G * d) / vtpot);

		// eq 8
		float vt2 = sqrt(3 * SIGMA / RHO_WATER / d + G * d * del_rho / 2 / RHO_WATER);

		// eq 1
		float vt = 1 / sqrt(1 / pow(vt1, 2) + 1 / pow(vt2, 2));


		return vt;
	} 
	static float BubbleCapacitance(int interface_type, float radius, float depth) {
		if (interface_type == INTERFACE_TYPE_FLUID)
			return radius / (1 - radius / (2 * depth) - pow((radius / (2 * depth)), 4));
		else // Rigid interface
			return radius / (1 + radius / (2 * depth) - pow((radius / (2 * depth)), 4));
	}
	static float ActualFreq(int interface_type, float radius, float depth, float v0, float AF_omega_a) {
		float bubbleCapacitance = BubbleCapacitance(interface_type, radius, depth);

		float omega = sqrt(bubbleCapacitance * AF_omega_a);

		return (omega / 2) / PI;
	}
	static float CalcBeta(float w0, float B_dr_a, float B_dvis_a, float B_dvis_b, float B_phi_a, float B_phi_b,
		float B_dth_a) {

		float dr = w0 * B_dr_a;
		float dvis = B_dvis_a / (w0 * B_dvis_b);

		float phi = B_phi_a / (B_phi_b * w0);

		float dth = 2 * (sqrt(phi - 3) - B_dth_a) / (phi - 4);

		float dtotal = dr + dvis + dth;

		return w0 * dtotal / sqrt(pow(dtotal, 2) + 4);
	}
	float2 system(float2 Y, float t){
		float f = JetForcing(t - 0.1f,cutoff,jval_initial);

		float d = depth;
		if (m_movingType == MOVING_TYPE_STATIC && t >= 0.1f) {
			// rising bubble, calc depth

			d = max(rising_d_m1, depth - (t - 0.1f) * vt);

		}
		//if we let it run too long and the values get very small,
		// the scipy integrator has problems. Might be setting the time step too
		// small? So just exit when the oscillator loses enough energy
		if (t > 0.11f && sqrt(pow(Y[1], 2) + pow(Y[1], 2)) < 1e-15f)
		{
			return 0;
		}
		else
		{
			float w0 = ActualFreq(m_interfaceType, radius, d, AF_v0, AF_omega_a) * AF_b;

			float m = k / pow(w0, 2);

			float beta = CalcBeta(w0, B_dr_a, B_dvis_a, B_dvis_b, B_phi_a, B_phi_B, B_dth_a);

			float acc = (f / m) - (2 * beta * Y[0]) - (pow(w0, 2) * Y[1]);

			return float2(acc, Y[0]);	
		}
	}

};
struct CompressedDOTSBubbleInfo
{
	// x = t, y = dt, z = dt/2,w = dt/6
	float4 dt126;
	// x = startIndex, y = endINdex, z = steps, w = stepsLeft
	int4 stepsLNNLNM1;
	int active;
	DOTS_Step_Calculations calculations;
};
RWStructuredBuffer<float2> x, x_tmp, k1, k2, k3, k4;
RWStructuredBuffer<CompressedDOTSBubbleInfo> compressedDOTSBubbleDataBuffer;
RWStructuredBuffer<float> PostProcessingOutput;

RWStructuredBuffer<DOTSBubbleData> bubbleData;
int N_LIMIT, MAX_BUBBLES;
float PostProcessingMultiplier;
int status;

#define NULL_RADIUS_ERROR -1
#define NULL_DEPTH_ERROR -2

static float BubbleTerminalVelocity(float r){

	float d = 2 * r;

	// eq 2
	float vtpot = 1 / 36 * del_rho * G * pow(d, 2) / MU;

	// eq 6
	float vt1 = vtpot * sqrt(1 + 0.73667f * sqrt(G * d) / vtpot);

	// eq 8
	float vt2 = sqrt(3 * SIGMA / RHO_WATER / d + G * d * del_rho / 2 / RHO_WATER);

	// eq 1
	float vt = 1 / sqrt(1 / pow(vt1, 2) + 1 / pow(vt2, 2));


	return vt;
}



DOTS_Step_Calculations GenerateDOTSCalculationData(DOTSBubbleData data,DOTS_Step_Calculations calc){
	calc.m_interfaceType = data.m_interfacetype;
	calc.m_movingType = data.m_movingtype;
	calc.radius =  data.radius;
	calc.depth = data.depth;
	calc.p0 = PATM + 2.0 * SIGMA / data.radius;
	calc.v0 = 4.0 / 3.0 * PI * pow(data.radius, 3);
	calc.k = GAMMA * calc.p0 / calc.v0;
	calc.cutoff = min(0.0006f, 0.5f / (3.0 / data.radius));
	calc.mrp = RHO_WATER * data.radius;
	calc.jval_initial = (-9.0 * GAMMA * SIGMA * ETA *
		(PATM + 2.0 * SIGMA / data.radius) * sqrt(1.0 + pow(ETA, 2)) /
		(4.0 * pow(RHO_WATER, 2) * pow(data.radius, 5))) * data.radius * calc.mrp;
	calc.vt = BubbleTerminalVelocity(data.radius);
	calc.rising_d_m1 = data.m_movingtype == MOVING_TYPE_RISING ?
		0.51 * 2 * data.radius : data.depth;
		
	// Actual Freq
	calc.AF_v0 = 4 / 3 * PI * pow(data.radius, 3);
	calc.AF_omega_a = 4 * PI * GAMMA * PATM / (RHO_WATER * calc.AF_v0);
	calc.AF_b = 2 * PI;
	// Calculate Beta
	calc.B_dr_a  = data.radius / CF;
	calc.B_dvis_a = 4 * MU;
	calc.B_dvis_b= RHO_WATER * pow(data.radius, 2);
	calc.B_phi_a  = 16 * GTH * G;
	calc.B_phi_B = 9* pow((GAMMA - 1), 2);
	calc.B_dth_a = (3 * GAMMA - 1) / (3 * (GAMMA - 1));
/*p0,v0,k,cutoff,mrp,
		jval_initial,vt,rising_d_m1,
		AF_v0,AF_omega_a,AF_b,
		B_dr_a,B_dvis_a,B_dvis_b,
		B_phi_a,B_phi_b,B_dth_a
	);*/


	return calc;
}
void SetData(DOTSBubbleData data){
	if(data.radius == 0){
		status = NULL_RADIUS_ERROR;
		return;
	}else if(data.depth == 0){
		status = NULL_DEPTH_ERROR;
		return;
	}
	int startIndex = data.index * N_LIMIT+1;
	float dt = (data.endTime - data.startTime) / (data.steps - 1);
	
	CompressedDOTSBubbleInfo c = compressedDOTSBubbleDataBuffer[data.index];
	c.dt126 = float4(data.startTime, dt, dt / 2, dt / 6);
	c.stepsLNNLNM1 = int4(startIndex, startIndex + N_LIMIT - 1, data.steps, data.steps);
	c.active = 1;
	c.calculations = GenerateDOTSCalculationData(data,c.calculations);
	compressedDOTSBubbleDataBuffer[data.index] = c;

	x[c.stepsLNNLNM1.x] = float2(0,0);
	x_tmp[c.stepsLNNLNM1.x] = float2(0,0);
	k1[c.stepsLNNLNM1.x] = float2(0,0);
	k2[c.stepsLNNLNM1.x] = float2(0,0);
	k3[c.stepsLNNLNM1.x] = float2(0,0);
	k4[c.stepsLNNLNM1.x] = float2(0,0);
}

void ExecuteRungeKutta4(int index)
{
	//TODO: look into doing a back and forth thing so we don't have
	// to waste time setting variables
	// set the last calculated value to the beggining
	CompressedDOTSBubbleInfo c = compressedDOTSBubbleDataBuffer[index];
	if (c.active && c.stepsLNNLNM1.w == 0)
	{
		c.active = false;
		compressedDOTSBubbleDataBuffer[index] = c;
	}
	if (c.active){
		int _min = min(N_LIMIT, c.stepsLNNLNM1.w);
		int _max = c.stepsLNNLNM1.x + _min;
		x[c.stepsLNNLNM1.x] = x[c.stepsLNNLNM1.y];
		x_tmp[c.stepsLNNLNM1.x] = x_tmp[c.stepsLNNLNM1.y];
		k1[c.stepsLNNLNM1.x] = k1[c.stepsLNNLNM1.y];
		k2[c.stepsLNNLNM1.x] = k2[c.stepsLNNLNM1.y];
		k3[c.stepsLNNLNM1.x] = k3[c.stepsLNNLNM1.y];
		k4[c.stepsLNNLNM1.x] = k4[c.stepsLNNLNM1.y];

		//	float dt23 = dts.x + dts.z;

		for (int i = c.stepsLNNLNM1.x + 1; i < _max; i++)
		{
			k1[i] = c.calculations.system(x[i - 1], c.dt126.x);
			k2[i] = c.calculations.system(x[i - 1] + k1[i] * c.dt126.z, c.dt126.x + c.dt126.z);
			k3[i] = c.calculations.system(x[i - 1] + k2[i] * c.dt126.z, c.dt126.x + c.dt126.z);
			k4[i] = c.calculations.system(x[i - 1] + k3[i] * c.dt126.y, c.dt126.x + c.dt126.y);
			x[i] = x[i - 1] + c.dt126.w * (k1[i] + 2 * k2[i] + 2 * k3[i] + k4[i]);
			c.dt126.x += c.dt126.y;
		}
		c.stepsLNNLNM1.w -= _min;
		compressedDOTSBubbleDataBuffer[index] = c;
	}
}

[numthreads(32, 1, 1)]
void ExecuteRungeKutta(uint3 id : SV_DispatchThreadID)
{
	if(compressedDOTSBubbleDataBuffer[id.x].active == 1)
		ExecuteRungeKutta4(id.x);
}

[numthreads(1024,1,1)]
void PostProcessing(uint3 id : SV_DispatchThreadID){
	float totalWaveform = 0;
	for(int i = 0; i < MAX_BUBBLES; i++){
		if(compressedDOTSBubbleDataBuffer[i].active == 1)
			totalWaveform += //1;
				x[compressedDOTSBubbleDataBuffer[i].stepsLNNLNM1.x+id.x].y;
	}
	PostProcessingOutput[id.x] = totalWaveform * PostProcessingMultiplier;
	
	PostProcessingOutput[id.x] = 
		isfinite(PostProcessingOutput[id.x]) && !isnan(PostProcessingOutput[id.x])
		 ? PostProcessingOutput[id.x] : 0;
	PostProcessingOutput[id.x] = clamp(PostProcessingOutput[id.x],-1,1);
/*
	if(MAX_BUBBLES == 0)
		PostProcessingOutput[id.x] = -100;
	else if(PostProcessingMultiplier == 0)
		PostProcessingOutput[id.x] = -200;*/
}



[numthreads(32,1,1)]
void InitializeBubbleData(uint3 id : SV_DispatchThreadID){

	SetData(bubbleData[id.x]);
}